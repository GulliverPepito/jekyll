---
title: Translator Guidelines
layout: blank
redirect_from:
 - /new-lesson-workflow
 - /translator-guidelines
skip_validation: true
---

# Translator Guidelines
<img src="{{site.baseurl}}/images/author-sm.png" class="garnish rounded float-left" />
<h2 class="noclear">Step 1: <a href="#proposing-a-new-lesson">Proposing the Translation of a Lesson</a></h2>
<h2 class="noclear">Step 2: <a href="#writing-a-new-lesson">Writing and Formatting a Translation</a></h2>
<h2 class="noclear">Step 3: <a href="#submitting-a-new-lesson">Submitting a Translated Lesson</a></h2>

### Proposing the Translation of a Lesson
If you want to translate a lesson published in *The Programming Historian*, please see the list of pending translations [each language-team should have one] and contact [Adam Crymble](adam.crymble@gmail.com) to discuss your language skills and translation experience. We look for translations that are rigorous, readable, and consider the needs of an English-reading audience. 

Once the translation of a published lesson is approved, one of our editors will create a "Translation Review Ticket" in our [repository](https://github.com/programminghistorian/ph-submissions). This issue will serve to document the progress made during the translation review. To avoid delays in publishing, we ask that you submit your translation within 90 days of the editor accepting your proposal. 

### Writing and Formatting a Translation
The Programming Historian is hosted at [GitHub](http://github.com/), which is a free platform for maintaining files and their revision history. It’s most often used to store files of programming code, but it’s also a fabulous way to maintain an open-access resource like the Programming Historian. More specifically, our site uses [GitHub Pages](https://pages.github.com/) to take a bunch of plain text files and turn them into a spiffy website. 

This means that we we ask that translators adhere to the following lesson requirements, which are not merely stylistic, but in fact necessary for our publishing platform. While our technical requirements may be unfamiliar to you, **we are here to help you through the process and learn the technologies as you go.**

Please note that as a volunteer-driven project, we are grateful for your attention to detail.

### Use plain text
Because our site is hosted using [GitHub Pages](https://pages.github.com), **your translation must be written in plain text**, using a text editor of your choice. *Text editors are distinctly different from traditional word processing programs like MS Word.* We highly recommend using [Atom](https://atom.io/), which is available for Mac or Windows. Mac users might consider [TextWrangler] or TextEdit (which comes with Mac OS X). Windows users might consider [Notepad++].

The specific editor you choose is not important, but you should begin writing your translation in plain text to avoid frustrations later on. For instance, stylized quotation marks automatically inserted by MS Word create formatting problems that can be hard to debug.

### Write in Markdown
**All new translations must be written in Markdown.** Markdown is a simple mark-up language that is best written in a text editor (as explained above, do not use a word processor like MS Word or Open Office). [GitHub Pages] are powered by [Jekyll](http://jekyllrb.com/), which automatically converts the Markdown files into the HTML pages that you can find here on the website. Even this page is written in Markdown, as you can see by inspecting [the raw text on GitHub].

For a gentle introduction to GitHub Markdown (especially with *Programming Historian*, see [Getting Started with Markdown]({{site.baseurl}}/lessons/getting-started-with-markdown), or the concise reference [GitHub Guide to Markdown].

<div class="alert alert-warning">
  Before continuing, be sure you understand how to use Markdown syntax to use basic formatting like headers, bold, italics, links, paragraphs, and lists.
</div>

To make this easier, we have provided a template that we ask you to use for all translations:

```
title: ["YOUR TITLE HERE"]
collection: lessons
layout: lesson
slug: [LEAVE BLANK]
date: [LEAVE BLANK]
translation_date: [LEAVE BLANK]
authors:
- [FORENAME SURNAME 1]
- [FORENAME SURNAME 2, etc]
reviewers:
- [LEAVE BLANK]
editors:
- [LEAVE BLANK]
translator:
- [FORENAME SURNAME 1]
translation-editor:
- [LEAVE BLANK]
translation-reviewer:
- [LEAVE BLANK]
original: [LEAVE BLANK]
review-ticket: [LEAVE BLANK]
difficulty: [LEAVE BLANK]
activity: [LEAVE BLANK]
topics: [LEAVE BLANK]
abstract: [LEAVE BLANK]
---

# Contents

{% include toc.html %}

# First level heading

[CONTENT HERE. Please write formally, sustainably, and for a global audience.]

## Second level heading - with some examples of formatting

### Font Formatting:
*italic text*
**bold text**
`reserved words or file names` (eg "for loop", or "myData.csv")

### Links:
[a link to *Programming Historian*](http://programminghistorian.org)

### Images:
{% include figure.html filename="IMAGE-FILENAME" caption="Caption to image" %} - see https://programminghistorian.org/en/author-guidelines for more guidance on images.

### A Sample Unordered List

* Fruits
  * Apples
  * Oranges
  * Grapes
* Dairy
  * Milk
  * Cheese

### A Sample Ordered List

1. Finish tutorial
2. Go to grocery store
3. Prepare lunch

###A Sample Table:

| Heading 1 | Heading 2 | Heading 3 |
| --------- | --------- | --------- |
| Row 1, column 1 | Row 1, column 2 | Row 1, column 3|
| Row 2, column 1 | Row 2, column 2 | Row 2, column 3|
| Row 3, column 1 | Row 3, column 2 | Row 3, column 3|

### An End Note:

This is some text.[^1]
This is some more text.[^2]



# Endnotes
[^1] Properly formatted citation using Chicago Manual of Style
[^2] Properly formatted citation using Chicago Manual of Style
```
